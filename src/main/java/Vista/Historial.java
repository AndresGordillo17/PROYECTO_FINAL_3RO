/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Modelo.Ficha;
import controlador.Conexion;
import controlador.ControladorFicha;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author usuario
 */
public class Historial extends javax.swing.JInternalFrame {
 private Ficha ficha;
    Conexion conectar = new Conexion();
    Connection conectado = (Connection) conectar.conectar();
    PreparedStatement iniciar;
    ResultSet respuesta;
    int res;//para escribir
    /**
     * Creates new form Historial
     */
    public Historial() {
        initComponents();
        setModel();
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtentrada = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBVER = new javax.swing.JTable();
        txtver = new javax.swing.JButton();
        txtbuscar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setText("HISTORIAL DE ASCENSOS");

        TBVER.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TBVER);

        txtver.setText("ver");
        txtver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtverActionPerformed(evt);
            }
        });

        txtbuscar.setText("BUSCAR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtentrada, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtver)
                                .addGap(140, 140, 140)))))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(546, Short.MAX_VALUE)
                    .addComponent(txtbuscar)
                    .addGap(171, 171, 171)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(txtentrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(213, 213, 213))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(txtver)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(90, 90, 90)
                    .addComponent(txtbuscar)
                    .addContainerGap(438, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtverActionPerformed
        // TODO add your handling code here:
        cargarTabla();
    }//GEN-LAST:event_txtverActionPerformed
     ArrayList<Ficha> listaFicha = new ArrayList<>();
    DefaultTableModel modelo = new DefaultTableModel();

    public void setModel() {
        String[] cabecera = {"Nro.", "Practicante", "cedula",
            "Instructor",
            "cinturon",
            "Fecha",
            "Postura", "Tecnica", "Puntuacion", "Resultado", "Observaciones"};
        modelo.setColumnIdentifiers(cabecera);
        TBVER.setModel(modelo);
    }

    public void setDatos() {
        Object[] datosFila = new Object[modelo.getColumnCount()];
        int nro = 1;
        for (Ficha datos : listaFicha) {
            datosFila[0] = nro;
            datosFila[1] = datos.getPracticante();
            datosFila[2] = datos.getCedula();
            datosFila[3] = datos.getInstructor();
            datosFila[4] = datos.getCinturon();
            datosFila[5] = datos.getFecha();
            datosFila[6] = datos.getTecnica();
            datosFila[7] = datos.getConocimiento();
            datosFila[8] = datos.getPuntuacion();
            datosFila[9] = datos.getResultado();
            datosFila[10] = datos.getObservaciones();
            nro++;
            modelo.addRow(datosFila);
        }
    }
    public ArrayList<Object[]> datosFicha() {
    ArrayList<Object[]> listaFicha = new ArrayList<>();
    try {
        String sql = "CALL ListarFichas()"; 
        CallableStatement cs = conectado.prepareCall(sql); 
        ResultSet res = cs.executeQuery(); 

        int cont = 1;
        while (res.next()) {
            ArrayList<Object> fila = new ArrayList<>();
            fila.add(cont);
            for (int i = 1; i <= 10; i++) {
                fila.add(res.getObject(i));
            }
            listaFicha.add(fila.toArray());
            cont++;
        }
        cs.close();
        return listaFicha;
    } catch (SQLException e) {
        System.out.println("Error al obtener datos de la base de datos: " + e.getMessage());
    }
    return null;
}
 private void limpiarTabla() {
        int a = modelo.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

     private void cargarTabla() {
    ControladorFicha DF = new ControladorFicha();
    ArrayList<Object[]> lista = DF.datosFicha();
    limpiarTabla();
    for (Object[] filas : lista) {
        // Convertir los IDs a nombres
        filas[1] = NombrePracticante((int) filas[1]);
        filas[3] = NombreInstructor((int) filas[3]);
        filas[4] = NombreCinturon((int) filas[4]);
        modelo.addRow(filas);
    }
    // Establecer el modelo de la tabla fuera del bucle for
    TBVER.setModel(modelo);
}


private String NombrePracticante(int idPracticante) {
    String nombrePracticante = "";
    try {
        String SQL = "SELECT NOMBRE FROM PRACTICANTE WHERE ID_PRACTICANTE = ?";
        iniciar = conectado.prepareStatement(SQL);
        iniciar.setInt(1, idPracticante);
        respuesta = iniciar.executeQuery();
        if (respuesta.next()) {
            nombrePracticante = respuesta.getString("NOMBRE");
        }
        iniciar.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al obtener el nombre del practicante: " + ex.getMessage());
    }
    return nombrePracticante;
}

private String NombreInstructor(int idInstructor) {
    String nombreInstructor = "";
    try {
        String SQL = "SELECT NOMBRE_INS FROM INSTRUCTORES WHERE ID_INSTRUCTOR = ?";
        iniciar = conectado.prepareStatement(SQL);
        iniciar.setInt(1, idInstructor);
        respuesta = iniciar.executeQuery();
        if (respuesta.next()) {
            nombreInstructor = respuesta.getString("NOMBRE_INS");
        }
        iniciar.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al obtener el nombre del instructor: " + ex.getMessage());
    }
    return nombreInstructor;
}

private String NombreCinturon(int idCinturon) {
    String nombreCinturon = "";
    try {
        String SQL = "SELECT COLOR FROM CINTURON WHERE ID_CINTURON = ?";
        iniciar = conectado.prepareStatement(SQL);
        iniciar.setInt(1, idCinturon);
        respuesta = iniciar.executeQuery();
        if (respuesta.next()) {
            nombreCinturon = respuesta.getString("COLOR");
        }
        iniciar.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al obtener el nombre del cinturón: " + ex.getMessage());
    }
    return nombreCinturon;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBVER;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton txtbuscar;
    private javax.swing.JTextField txtentrada;
    private javax.swing.JButton txtver;
    // End of variables declaration//GEN-END:variables
}
